---
meta:
  s3-release-params: &s3-release-params
    bucket: ((s3-bosh-releases-bucket))
    region_name: ((aws-region))
    private: true
groups:
- name: all
  jobs:
  - deploy-master-bosh
  - deploy-tooling-bosh
  - deploy-development-bosh
  - deploy-staging-bosh
  - deploy-production-bosh
  - common-releases-master
  - common-releases-tooling
  - common-releases-development
  - common-releases-staging
  - common-releases-production
- name: bosh
  jobs:
  - deploy-master-bosh
  - deploy-tooling-bosh
  - deploy-development-bosh
  - deploy-staging-bosh
  - deploy-production-bosh
- name: releases
  jobs:
  - common-releases-master
  - common-releases-tooling
  - common-releases-development
  - common-releases-staging
  - common-releases-production
jobs:
- name: deploy-master-bosh
  serial: true
  plan:
  - in_parallel:
    - get: bosh-deployment
      trigger: true
    - get: bosh-config
      resource: bosh-create-env-config
      trigger: true
    - get: common
      trigger: true
      resource: common-master
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-tooling
    - get: bosh-state
      resource: masterbosh-state
    - get: ca-cert-store
      trigger: true
  - task: terraform-secrets
    file: bosh-config/ci/terraform-secrets.yml
    params:
      VARS_FILE: terraform-master.yml
  - task: bosh-create-env
    file: bosh-config/bosh-create-env.yml
    tags: [iaas]
  - task: update-cloud-config
    file: bosh-config/ci/update-cloud-config.yml
    params:
      OPS_PATHS: "bosh-config/cloud-config/master.yml"
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((masterbosh-target))
      BOSH_CLIENT: admin
      BOSH_CLIENT_SECRET: ((master_bosh_admin_password))
  ensure:
    put: masterbosh-state
    params:
      file: updated-bosh-state/*.json
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Master BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Master BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: common-releases-master
  serial: true
  plan:
  - in_parallel:
    - get: certificate
      resource: ca-cert-store
    - get: bosh-deployment
      passed:
      - deploy-master-bosh
      trigger: true
    - get: bosh-config
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
      trigger: true
    - get: common-master
      trigger: true
    - get: cg-s3-fisma-release
      trigger: true
    - get: cg-s3-awslogs-xenial-release
      trigger: true
    - get: cg-s3-awslogs-bionic-release
      trigger: true
    - get: cg-s3-nessus-agent-release
      trigger: true
    - get: cg-s3-clamav-release
      trigger: true
    - get: cg-s3-snort-release
      trigger: true
    - get: aide-release
      trigger: true
    - get: cron-release
      trigger: true
    - get: syslog-release
      trigger: true
    - get: node-exporter-release
      trigger: true
    - get: masterbosh-state
      passed: [deploy-master-bosh]
  - task: upload-releases
    config: &upload-releases-config
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - {name: certificate}
      - {name: cg-s3-fisma-release, path: releases/fisma}
      - {name: cg-s3-awslogs-xenial-release, path: releases/awslogs-xenial}
      - {name: cg-s3-awslogs-bionic-release, path: releases/awslogs-bionic}
      - {name: cg-s3-nessus-agent-release, path: releases/nessus-agent}
      - {name: cg-s3-clamav-release, path: releases/clamav}
      - {name: cg-s3-snort-release, path: releases/snort}
      - {name: aide-release, path: releases/aide}
      - {name: cron-release, path: releases/cron}
      - {name: node-exporter-release, path: releases/node-exporter}
      - {name: syslog-release, path: releases/syslog}
      params:
        BOSH_CA_CERT: ((common_ca_cert_store))
        BOSH_CLIENT: admin
        BOSH_CLIENT_SECRET: ((master_bosh_admin_password))
        BOSH_ENVIRONMENT: ((masterbosh-target))
      run:
        path: sh
        args:
        - -exc
        - |
          for release in releases/**/*.tgz; do
            bosh upload-release "${release}"
          done
          bosh -n clean-up
  - task: update-runtime-config
    file: bosh-config/ci/update-runtime-config.yml
    input_mapping:
      common: common-master
    params:
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((masterbosh-target))
      BOSH_CLIENT: admin
      BOSH_CLIENT_SECRET: ((master_bosh_admin_password))
      BOSH_ENV_NAME: master

- name: deploy-tooling-bosh
  serial: true
  plan:
  - in_parallel:
    - get: ca-cert-store
      trigger: true
    - get: bosh-deployment
      trigger: true
      passed:
      - deploy-master-bosh
    - get: bosh-config
      trigger: true
      passed:
      - common-releases-master
    - get: bosh-stemcell-bionic
      trigger: true
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-tooling
    - get: terraform-yaml-development
      trigger: true
    - get: terraform-yaml-staging
      trigger: true
    - get: terraform-yaml-production
      trigger: true
  - task: terraform-secrets
    file: bosh-config/ci/terraform-secrets.yml
  - put: toolingbosh-deployment
    params: &bosh-deployment
      manifest: bosh-deployment/bosh.yml
      stemcells:
      - bosh-stemcell-bionic/*.tgz
      ops_files:
      - bosh-deployment/uaa.yml
      - bosh-deployment/credhub.yml
      - bosh-deployment/aws/cpi.yml
      - bosh-deployment/aws/iam-instance-profile.yml
      - bosh-deployment/misc/source-releases/bosh.yml
      - bosh-deployment/misc/source-releases/uaa.yml
      - bosh-deployment/misc/source-releases/credhub.yml
      - bosh-config/operations/name.yml
      - bosh-config/operations/s3-blobstore.yml
      - bosh-config/operations/external-db.yml
      - bosh-config/operations/uaa-clients.yml
      - bosh-config/operations/cloud-config.yml
      - bosh-config/operations/update.yml
      - bosh-config/operations/cron.yml
      - bosh-config/operations/cpi.yml
      - bosh-config/operations/dns.yml
      - bosh-config/operations/nist-ntp.yml
      - bosh-config/operations/add-new-saml-key.yml
      - bosh-config/operations/remove-old-blobstore-ca.yml
      - bosh-config/operations/add-cloud-gov-root-certificate.yml
      vars_files:
      - bosh-config/variables/tooling.yml
      - terraform-secrets/terraform.yml
      - terraform-yaml/state.yml
  - task: update-cloud-config
    file: bosh-config/ci/update-cloud-config-tooling.yml
    params:
      OPS_PATHS: "bosh-config/cloud-config/tooling.yml"
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((toolingbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((tooling_bosh_uaa_ci_client_secret))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Tooling BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Tooling BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: common-releases-tooling
  serial: true
  plan:
  - in_parallel:
    - get: certificate
      resource: ca-cert-store
    - get: bosh-deployment
      trigger: true
    - get: bosh-config
      trigger: true
      passed:
      - deploy-tooling-bosh
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-production
    - get: cg-s3-fisma-release
      trigger: true
      passed:
      - common-releases-master
    - get: cg-s3-awslogs-xenial-release
      trigger: true
      passed:
      - common-releases-master
    - get: cg-s3-awslogs-bionic-release
      trigger: true
      passed:
      - common-releases-master
    - get: cg-s3-nessus-agent-release
      trigger: true
      passed:
      - common-releases-master
    - get: cg-s3-clamav-release
      trigger: true
      passed:
      - common-releases-master
    - get: cg-s3-snort-release
      trigger: true
      passed:
      - common-releases-master
    - get: aide-release
      trigger: true
      passed:
      - common-releases-master
    - get: cron-release
      trigger: true
      passed:
      - common-releases-master
    - get: node-exporter-release
      trigger: true
      passed:
      - common-releases-master
    - get: syslog-release
      trigger: true
      passed:
      - common-releases-master
    - get: toolingbosh-deployment
      trigger: true
      passed:
      - deploy-tooling-bosh
  - task: upload-releases
    config:
      <<: *upload-releases-config
      inputs:
      - {name: certificate}
      - {name: cg-s3-fisma-release, path: releases/fisma}
      - {name: cg-s3-awslogs-xenial-release, path: releases/awslogs-xenial}
      - {name: cg-s3-awslogs-bionic-release, path: releases/awslogs-bionic}
      - {name: cg-s3-nessus-agent-release, path: releases/nessus-agent}
      - {name: cg-s3-clamav-release, path: releases/clamav}
      - {name: cg-s3-snort-release, path: releases/snort}
      - {name: aide-release, path: releases/aide}
      - {name: cron-release, path: releases/cron}
      - {name: node-exporter-release, path: releases/node-exporter}
      - {name: syslog-release, path: releases/syslog}
      params:
        BOSH_CA_CERT: ((common_ca_cert_store))
        BOSH_CLIENT: ci
        BOSH_CLIENT_SECRET: ((tooling_bosh_uaa_ci_client_secret))
        BOSH_ENVIRONMENT: ((toolingbosh-target))
  - task: update-runtime-config
    file: bosh-config/ci/update-runtime-config.yml
    params:
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((toolingbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((tooling_bosh_uaa_ci_client_secret))
      BOSH_ENV_NAME: tooling

- name: deploy-development-bosh
  serial: true
  plan:
  - in_parallel:
    - get: ca-cert-store
      trigger: true
    - get: bosh-deployment
      trigger: true
      passed:
      - deploy-tooling-bosh
    - get: bosh-config
      trigger: true
      passed:
      - common-releases-tooling
    - get: bosh-stemcell-bionic
      trigger: true
      passed:
      - deploy-tooling-bosh
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-development
  - task: terraform-secrets
    file: bosh-config/ci/terraform-secrets.yml
  - put: developmentbosh-deployment
    params:
      <<: *bosh-deployment
      vars_files:
      - bosh-config/variables/development.yml
      - terraform-secrets/terraform.yml
      - terraform-yaml/state.yml
  - task: update-cloud-config
    file: bosh-config/ci/update-cloud-config.yml
    params:
      OPS_PATHS: "bosh-config/cloud-config/main.yml bosh-config/cloud-config/cf.yml bosh-config/cloud-config/development.yml"
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((developmentbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((development_bosh_uaa_ci_client_secret))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy development BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed development BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: common-releases-development
  serial: true
  plan:
  - in_parallel:
    - get: certificate
      resource: ca-cert-store
    - get: bosh-deployment
      trigger: true
      passed:
      - deploy-development-bosh
    - get: bosh-config
      trigger: true
      passed:
      - deploy-development-bosh
    - get: terraform-yaml
      resource: terraform-yaml-development
    - get: cg-s3-fisma-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cg-s3-awslogs-xenial-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cg-s3-awslogs-bionic-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cg-s3-nessus-agent-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cg-s3-clamav-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cg-s3-snort-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: aide-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: cron-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: node-exporter-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: syslog-release
      trigger: true
      passed:
      - common-releases-tooling
    - get: developmentbosh-deployment
      passed: [deploy-development-bosh]
  - task: upload-releases
    config:
      <<: *upload-releases-config
      params:
        BOSH_CA_CERT: ((common_ca_cert_store))
        BOSH_CLIENT: ci
        BOSH_CLIENT_SECRET: ((development_bosh_uaa_ci_client_secret))
        BOSH_ENVIRONMENT: ((developmentbosh-target))
  - task: update-runtime-config
    file: bosh-config/ci/update-runtime-config.yml
    params:
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((developmentbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((development_bosh_uaa_ci_client_secret))
      BOSH_ENV_NAME: development

- name: deploy-staging-bosh
  serial: true
  plan:
  - in_parallel:
    - get: ca-cert-store
      trigger: true
    - get: bosh-deployment
      trigger: true
      passed:
      - common-releases-development
    - get: bosh-config
      trigger: true
      passed:
      - common-releases-development
    - get: bosh-stemcell-bionic
      trigger: true
      passed:
      - deploy-development-bosh
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-staging
  - task: terraform-secrets
    file: bosh-config/ci/terraform-secrets.yml
  - put: stagingbosh-deployment
    params:
      <<: *bosh-deployment
      vars_files:
      - bosh-config/variables/staging.yml
      - terraform-secrets/terraform.yml
      - terraform-yaml/state.yml
  - task: update-cloud-config
    file: bosh-config/ci/update-cloud-config.yml
    params:
      OPS_PATHS: "bosh-config/cloud-config/main.yml bosh-config/cloud-config/cf.yml bosh-config/cloud-config/staging.yml"
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((stagingbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((staging_bosh_uaa_ci_client_secret))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Staging BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Staging BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: common-releases-staging
  serial: true
  plan:
  - in_parallel:
    - get: certificate
      resource: ca-cert-store
    - get: bosh-deployment
      trigger: true
      passed:
      - deploy-staging-bosh
    - get: bosh-config
      trigger: true
      passed:
      - deploy-staging-bosh
    - get: terraform-yaml
      resource: terraform-yaml-staging
    - get: cg-s3-fisma-release
      trigger: true
      passed:
      - common-releases-development
    - get: cg-s3-awslogs-xenial-release
      trigger: true
      passed:
      - common-releases-development
    - get: cg-s3-awslogs-bionic-release
      trigger: true
      passed:
      - common-releases-development
    - get: cg-s3-nessus-agent-release
      trigger: true
      passed:
      - common-releases-development
    - get: cg-s3-clamav-release
      trigger: true
      passed:
      - common-releases-development
    - get: cg-s3-snort-release
      trigger: true
      passed:
      - common-releases-development
    - get: aide-release
      trigger: true
      passed:
      - common-releases-development
    - get: cron-release
      trigger: true
      passed:
      - common-releases-development
    - get: node-exporter-release
      trigger: true
      passed:
      - common-releases-development
    - get: syslog-release
      trigger: true
      passed:
      - common-releases-development
    - get: stagingbosh-deployment
      passed: [deploy-staging-bosh]
  - task: upload-releases
    config:
      <<: *upload-releases-config
      params:
        BOSH_CA_CERT: ((common_ca_cert_store))
        BOSH_CLIENT: ci
        BOSH_CLIENT_SECRET: ((staging_bosh_uaa_ci_client_secret))
        BOSH_ENVIRONMENT: ((stagingbosh-target))
  - task: update-runtime-config
    file: bosh-config/ci/update-runtime-config.yml
    params:
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((stagingbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((staging_bosh_uaa_ci_client_secret))
      BOSH_ENV_NAME: staging

- name: deploy-production-bosh
  serial: true
  plan:
  - in_parallel:
    - get: ca-cert-store
      trigger: true
    - get: bosh-deployment
      passed:
      - common-releases-staging
      trigger: true
    - get: bosh-config
      passed:
      - common-releases-staging
      trigger: true
    - get: bosh-stemcell-bionic
      passed:
      - deploy-staging-bosh
      trigger: true
    - get: terraform-yaml
      trigger: true
      resource: terraform-yaml-production
  - task: terraform-secrets
    file: bosh-config/ci/terraform-secrets.yml
  - put: productionbosh-deployment
    params:
      <<: *bosh-deployment
      vars_files:
      - bosh-config/variables/production.yml
      - terraform-secrets/terraform.yml
      - terraform-yaml/state.yml
  - task: update-cloud-config
    file: bosh-config/ci/update-cloud-config.yml
    params:
      OPS_PATHS: "bosh-config/cloud-config/main.yml bosh-config/cloud-config/cf.yml"
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((productionbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((production_bosh_uaa_ci_client_secret))
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy production BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed production BOSH
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: ((slack-channel))
      username: ((slack-username))
      icon_url: ((slack-icon-url))

- name: common-releases-production
  serial: true
  plan:
  - in_parallel:
    - get: certificate
      resource: ca-cert-store
    - get: bosh-deployment
      trigger: true
    - get: bosh-config
    - get: terraform-yaml
      resource: terraform-yaml-production
    - get: cg-s3-fisma-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cg-s3-awslogs-xenial-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cg-s3-awslogs-bionic-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cg-s3-nessus-agent-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cg-s3-clamav-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cg-s3-snort-release
      trigger: true
      passed:
      - common-releases-staging
    - get: aide-release
      trigger: true
      passed:
      - common-releases-staging
    - get: cron-release
      trigger: true
      passed:
      - common-releases-staging
    - get: node-exporter-release
      trigger: true
      passed:
      - common-releases-staging
    - get: syslog-release
      trigger: true
      passed:
      - common-releases-staging
    - get: productionbosh-deployment
      passed: [deploy-production-bosh]
  - task: upload-releases
    config:
      <<: *upload-releases-config
      params:
        BOSH_CA_CERT: ((common_ca_cert_store))
        BOSH_CLIENT: ci
        BOSH_CLIENT_SECRET: ((production_bosh_uaa_ci_client_secret))
        BOSH_ENVIRONMENT: ((productionbosh-target))
  - task: update-runtime-config
    file: bosh-config/ci/update-runtime-config.yml
    params:
      BOSH_CA_CERT: ((common_ca_cert_store))
      BOSH_ENVIRONMENT: ((productionbosh-target))
      BOSH_CLIENT: ci
      BOSH_CLIENT_SECRET: ((production_bosh_uaa_ci_client_secret))
      BOSH_ENV_NAME: production

resources:
- name: ca-cert-store
  type: s3-iam
  source:
    bucket: ((secrets-bucket))
    region_name: ((aws-region))
    versioned_file: ca-cert-store.crt

- name: common-master
  type: s3-iam
  source:
    bucket: ((secrets-bucket))
    region_name: ((aws-region))
    versioned_file: master-bosh.yml

- name: masterbosh-state
  type: s3-iam
  source:
    bucket: ((secrets-bucket))
    region_name: ((aws-region))
    versioned_file: master-bosh-state.json
    server_side_encryption: AES256

- name: cron-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/cron-boshrelease

- name: syslog-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/syslog-release

- name: bosh-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git
    branch: master

- name: bosh-config
  type: git
  source:
    uri: ((bosh-config-git-url))
    branch: ((bosh-config-git-branch))

- name: bosh-create-env-config
  type: git
  source:
    uri: ((bosh-config-git-url))
    branch: ((bosh-config-git-branch))
    paths:
    - bosh-create-env*
    - cloud-config/*

- name: bosh-stemcell-bionic
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-bionic-go_agent

- name: toolingbosh-deployment
  type: bosh-deployment
  source:
    target: ((masterbosh-target))
    client: admin
    client_secret: ((master_bosh_admin_password))
    ca_cert: ((common_ca_cert_store))
    deployment: toolingbosh

- name: developmentbosh-deployment
  type: bosh-deployment
  source:
    target: ((toolingbosh-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert_store))
    deployment: developmentbosh

- name: stagingbosh-deployment
  type: bosh-deployment
  source:
    target: ((toolingbosh-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert_store))
    deployment: stagingbosh

- name: productionbosh-deployment
  type: bosh-deployment
  source:
    target: ((toolingbosh-target))
    client: ci
    client_secret: ((tooling_bosh_uaa_ci_client_secret))
    ca_cert: ((common_ca_cert_store))
    deployment: productionbosh

- name: slack
  type: slack-notification
  source:
    url: ((slack-webhook-url))

- name: cg-s3-fisma-release
  type: s3-iam
  source:
    regexp: fisma-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-awslogs-xenial-release
  type: s3-iam
  source:
    regexp: awslogs-xenial-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-awslogs-bionic-release
  type: s3-iam
  source:
    regexp: awslogs-bionic-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-nessus-agent-release
  type: s3-iam
  source:
    regexp: nessus-agent-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-clamav-release
  type: s3-iam
  source:
    regexp: clamav-(.*).tgz
    <<: *s3-release-params

- name: cg-s3-snort-release
  type: s3-iam
  source:
    regexp: snort-(.*).tgz
    <<: *s3-release-params

- name: aide-release
  type: s3-iam
  source:
    regexp: aide-(.*).tgz
    <<: *s3-release-params

- name: node-exporter-release
  type: bosh-io-release
  source:
    repository: cloudfoundry-community/node-exporter-boshrelease

- name: terraform-yaml-tooling
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-tooling))
    region_name: ((aws-region))

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-development))
    region_name: ((aws-region))

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-staging))
    region_name: ((aws-region))

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: ((tf-state-bucket))
    versioned_file: ((tf-state-file-production))
    region_name: ((aws-region))

resource_types:
- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

- name: semver-iam
  type: docker-image
  source:
    repository: governmentpaas/semver-resource
